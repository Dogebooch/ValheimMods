<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConfigurationManager</name>
    </assembly>
    <members>
        <member name="M:ConfigurationManager.SettingSearcher.FindPlugins">
            <summary>
            Search for all instances of BaseUnityPlugin loaded by chainloader or other means.
            </summary>
        </member>
        <member name="M:ConfigurationManager.SettingSearcher.GetBepInExCoreConfig">
            <summary>
            Get entries for all core BepInEx settings
            </summary>
        </member>
        <member name="M:ConfigurationManager.SettingSearcher.GetPluginConfig(BepInEx.BaseUnityPlugin)">
            <summary>
            Get entries for all settings of a plugin
            </summary>
        </member>
        <member name="T:ConfigurationManager.ConfigurationManager">
            <summary>
            An easy way to let user configure how a plugin behaves without the need to make your own GUI. The user can change any of the settings you expose, even keyboard shortcuts.
            https://github.com/ManlyMarco/BepInEx.ConfigurationManager
            </summary>
        </member>
        <member name="F:ConfigurationManager.ConfigurationManager.GUID">
            <summary>
            GUID of this plugin
            </summary>
        </member>
        <member name="F:ConfigurationManager.ConfigurationManager.Version">
            <summary>
            Version constant
            </summary>
        </member>
        <member name="E:ConfigurationManager.ConfigurationManager.DisplayingWindowChanged">
            <summary>
            Event fired every time the manager window is shown or hidden.
            </summary>
        </member>
        <member name="F:ConfigurationManager.ConfigurationManager.OverrideHotkey">
            <summary>
            Disable the hotkey check used by config manager. If enabled you have to set <see cref="P:ConfigurationManager.ConfigurationManager.DisplayingWindow"/> to show the manager.
            </summary>
        </member>
        <member name="M:ConfigurationManager.ConfigurationManager.#ctor">
            <inheritdoc />
        </member>
        <member name="P:ConfigurationManager.ConfigurationManager.DisplayingWindow">
            <summary>
            Is the config manager main window displayed on screen
            </summary>
        </member>
        <member name="M:ConfigurationManager.ConfigurationManager.RegisterCustomSettingDrawer(System.Type,System.Action{ConfigurationManager.SettingEntryBase})">
            <summary>
            Register a custom setting drawer for a given type. The action is ran in OnGui in a single setting slot.
            Do not use any Begin / End layout methods, and avoid raising height from standard.
            </summary>
        </member>
        <member name="M:ConfigurationManager.ConfigurationManager.BuildSettingList">
            <summary>
            Rebuild the setting list. Use to update the config manager window if config settings were removed or added while it was open.
            </summary>
        </member>
        <member name="P:ConfigurationManager.ConfigurationManager.SearchString">
            <summary>
            String currently entered into the search box
            </summary>
        </member>
        <member name="T:ConfigurationManager.SettingEntryBase">
            <summary>
            Class representing all data about a setting collected by ConfigurationManager.
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.AcceptableValues">
            <summary>
            List of values this setting can take
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.AcceptableValueRange">
            <summary>
            Range of the values this setting can take
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.ShowRangeAsPercent">
            <summary>
            Should the setting be shown as a percentage (only applies to value range settings)
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.CustomDrawer">
            <summary>
            Custom setting draw action.
            Use either CustomDrawer or CustomHotkeyDrawer, using both at the same time leads to undefined behaviour.
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.CustomHotkeyDrawer">
            <summary>
            Custom setting draw action that allows polling keyboard input with the Input class.
            Use either CustomDrawer or CustomHotkeyDrawer, using both at the same time leads to undefined behaviour.
            </summary>
        </member>
        <member name="T:ConfigurationManager.SettingEntryBase.CustomHotkeyDrawerFunc">
            <summary>
            Custom setting draw action that allows polling keyboard input with the Input class.
            </summary>
            <param name="setting">Setting currently being set, is available</param>
            <param name="isCurrentlyAcceptingInput">Set this ref parameter to true when you want the current setting drawer to receive Input events. Remember to set it to false after you are done!</param>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.Browsable">
            <summary>
            Show this setting in the settings screen at all? If false, don't show.
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.Category">
            <summary>
            Category the setting is under. Null to be directly under the plugin.
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.DefaultValue">
            <summary>
            If set, a "Default" button will be shown next to the setting to allow resetting to default.
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.HideDefaultButton">
            <summary>
            Force the "Reset" button to not be displayed, even if a valid DefaultValue is available. 
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.HideSettingName">
            <summary>
            Force the setting name to not be displayed. Should only be used with a <see cref="P:ConfigurationManager.SettingEntryBase.CustomDrawer"/> to get more space.
            Can be used together with <see cref="P:ConfigurationManager.SettingEntryBase.HideDefaultButton"/> to gain even more space.
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.Description">
            <summary>
            Optional description shown when hovering over the setting
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.DispName">
            <summary>
            Name of the setting
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.PluginInfo">
            <summary>
            Plugin this setting belongs to
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.ReadOnly">
            <summary>
            Only allow showing of the value. False whenever possible by default.
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.SettingType">
            <summary>
            Type of the variable
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.PluginInstance">
            <summary>
            Instance of the plugin that owns this setting
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.IsAdvanced">
            <summary>
            Is this setting advanced
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.Order">
            <summary>
            Order of the setting on the settings list relative to other settings in a category. 0 by default, lower is higher on the list.
            </summary>
        </member>
        <member name="M:ConfigurationManager.SettingEntryBase.Get">
            <summary>
            Get the value of this setting
            </summary>
        </member>
        <member name="M:ConfigurationManager.SettingEntryBase.Set(System.Object)">
            <summary>
            Set the value of this setting
            </summary>
        </member>
        <member name="M:ConfigurationManager.SettingEntryBase.SetValue(System.Object)">
            <summary>
            Implementation of <see cref="M:ConfigurationManager.SettingEntryBase.Set(System.Object)"/>
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.ObjToStr">
            <summary>
            Custom converter from setting type to string for the textbox
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.StrToObj">
            <summary>
            Custom converter from string to setting type for the textbox
            </summary>
        </member>
        <member name="M:ConfigurationManager.SettingFieldDrawer.EnsureHueSatTexture">
            <summary>Ensure we have a 128Ã—128 hue-sat texture allocated.</summary>
        </member>
        <member name="M:ConfigurationManager.SettingFieldDrawer.RecolorHueSatTexture(System.Single)">
            <summary>
            Fill _hueSatTex so horizontally is Hue, vertically is Sat (top = S=1, bottom = S=0),
            at a fixed brightness = V param. E.g. V=1 means top row goes from H=0..1 with S=1
            </summary>
        </member>
        <member name="M:ConfigurationManager.SettingFieldDrawer.DrawColor(ConfigurationManager.SettingEntryBase)">
            <summary>
            Integrated color picker using a Hue-Sat rectangle + Value slider + Alpha slider,
            plus existing R/G/B/A textfields and a hex field.
            </summary>
        </member>
        <member name="M:ConfigurationManager.SettingFieldDrawer.DrawColorField(System.String,UnityEngine.Color@,System.Single@)">
            <summary>
            Renders label + textfield + slider for the given color component (R/G/B/A).
            </summary>
        </member>
        <member name="M:ConfigurationManager.SettingFieldDrawer.DrawHexField(UnityEngine.Color@)">
            <summary>
            Allows editing via hex, like #RRGGBB or #RRGGBBAA
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ConfigurationManager.SettingFieldDrawer.FillTextureWithColor(UnityEngine.Color,UnityEngine.Texture2D)" -->
        <member name="T:ConfigurationManager.Utilities.GUIHelper">
            <summary>
            Helper class for GUI operations.
            </summary>
        </member>
        <member name="M:ConfigurationManager.Utilities.GUIHelper.BeginColor(UnityEngine.Color)">
            <summary>
            Begins the color change.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:ConfigurationManager.Utilities.GUIHelper.EndColor">
            <summary>
            Ends the color change.
            </summary>
        </member>
        <member name="M:ConfigurationManager.Utilities.GUIHelper.IsEnterPressed">
            <summary>
            Checks if the enter key is pressed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfigurationManager.Utilities.GUIHelper.HasChanged">
            <summary>
            Checks if the GUI has changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConfigurationManager.Utilities.GUIHelper.CreateLabelWithColor(System.String,UnityEngine.Color,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>
            Creates a label with a specified color. Optionally a style can be specified.
            </summary>
            <param name="text"></param>
            <param name="color"></param>
            <param name="style"></param>
            <param name="options"></param>
        </member>
        <member name="M:ConfigurationManager.Utilities.GUIHelper.CreateButtonWithColor(System.String,UnityEngine.Color,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>
            Creates a button with a specified color. Optionally a style can be specified.
            </summary>
            <param name="text"></param>
            <param name="color"></param>
            <param name="style"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ConfigurationManager.Utilities.GUIHelper.CreateButtonWithColor(System.String,UnityEngine.Rect,UnityEngine.GUIStyle)">
            <summary>
            Creates a button with a specified color. Optionally a style can be specified.
            </summary>
            <param name="text"></param>
            <param name="r"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:ConfigurationManager.Utilities.GUIHelper.CreateButtonWithColor(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.Color,UnityEngine.GUILayoutOption[])">
            <summary>
            Creates a button with a specified color. Optionally a style can be specified.
            </summary>
            <param name="content"></param>
            <param name="style"></param>
            <param name="color"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ConfigurationManager.Utilities.GUIHelper.CreateToggleWithColor(System.Boolean,System.String,UnityEngine.Color,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>
            Creates a toggle with a specified color. Optionally a style can be specified.
            </summary>
            <param name="value"></param>
            <param name="text"></param>
            <param name="color"></param>
            <param name="style"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ConfigurationManager.Utilities.GUIHelper.CreateWindowWithColor(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,System.String,UnityEngine.Color,UnityEngine.GUILayoutOption[])">
            <summary>
            Creates a window with a specified color. Optionally a style can be specified.
            </summary>
            <param name="id"></param>
            <param name="screenRect"></param>
            <param name="func"></param>
            <param name="text"></param>
            <param name="color"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:ConfigurationManager.Utilities.TexturePool">
            <summary>
            Simple static texture pool that reuses Texture2D objects
            to reduce overhead of creating/destroying them repeatedly.
            </summary>
        </member>
        <member name="M:ConfigurationManager.Utilities.TexturePool.GetTexture2D(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean)">
            <summary>
            Retrieve a pooled texture (or create a new one) matching the desired specs.
            </summary>
        </member>
        <member name="M:ConfigurationManager.Utilities.TexturePool.ReleaseTexture2D(UnityEngine.Texture2D)">
            <summary>
            Return a texture to the pool.
            </summary>
        </member>
        <member name="T:ConfigurationManager.ValueChangedEventArgs`1">
            <summary>
            Arguments representing a change in value
            </summary>
        </member>
        <member name="M:ConfigurationManager.ValueChangedEventArgs`1.#ctor(`0)">
            <inheritdoc />
        </member>
        <member name="P:ConfigurationManager.ValueChangedEventArgs`1.NewValue">
            <summary>
            Newly assigned value
            </summary>
        </member>
    </members>
</doc>
